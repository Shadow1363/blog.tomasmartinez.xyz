{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>I'm Tom\u00e1s Martinez and this is my blog/docs!</p> <p>Using Material for MkDocs, I write Markdown (.md) and it automatically creates a site for me.</p> <p>Huge shoutout to James Willet - I followed along with his videos to get the site started.</p> <p>If you also want to take a peek under the hood, this site is on GitHub!</p>"},{"location":"#purpose","title":"Purpose","text":"<p>Ah yes, the purpose of this site. Well, it comes down to three things:</p> <ol> <li>Make a habit of writing</li> <li>Talk Tech</li> <li>Documentation for my APIs</li> </ol> <p>A blog is just cool too, it's like my own social media site, just for me, and I can do whatever I want.</p> <p>But I guess the real reason is I want to leave an impact in life. I want to create something, not just be a consumer. And hey, if I just so happen to solve a very niche problem that someone later down the line uses, i'd consider this site a success.</p> <p>Unfortunately, it will all mostly be in English. I tried setting up a trilingual site, but it would be too much work having to rewrite all my thoughts 3 times.</p> <p>Anyways, if you're here, you probably want to check out my blog or documentation.</p> <p>On the left sidebar, you should find Docs and Blog.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/03/10/site-is-live/","title":"Site is live","text":"<p>If your seeing this that means we are live!</p> <p>So my genius solution to learning workflows was to just have <code>/site</code> in the repo as well, so the build is run on my end. I tried doing a separate branch but it didn't work as hoped. Also swapped Giscus to use, <code>pathname</code> as there was a shared discussion for some <code>.md</code></p> <p>Now time to actually work on projects to upload!</p>"},{"location":"blog/2025/03/12/single-player-card-games/","title":"Single Player Card Games","text":"<p>Learn to play 5+ single player card games using just a standard 52-card deck.</p> <p>I take no credit for theses videos, I just compiled them all in one place for me to watch later. All credit goes to their original creators.</p> <p>If you're looking for a deck of cards I recommend the bicycle decks, personally I got their Capitol and Dragon deck.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#regicide","title":"Regicide","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#joker-jailbreak","title":"Joker Jailbreak","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#napoleons-tomb","title":"Napoleon's Tomb","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#clear-the-dungeon","title":"Clear the Dungeon","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#block-eleven","title":"Block Eleven","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/03/12/single-player-card-games/#one-hand-solitaire","title":"One Hand Solitaire","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/","title":"Best TCGs","text":"<p>Talking about what I like &amp; dislike about popular card games</p> <p>Writing down all the card games I've played and what I enjoyed about them.</p> <p>My goal here is to try and pinpoint what I loved (and disliked) about all the card games so that when I finally throw my hat in the ring, I can do it right.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#magic-the-gathering","title":"Magic The Gathering","text":"<p>Classic\u2014the gold standard for card games. To be honest, it's the most fun card game I've played, but there are a few flaws. Even though I may be harsh on it, it's still my favorite on the list; think of it as tough love.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#pros","title":"Pros","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#fun","title":"Fun","text":"<p>The game is just fun and offers so much room to create the exact playstyle you want. The whole stack and instant-speed spells make this game great. I love the \"in response to\" mechanic\u2014it feels like you're really wizarding. </p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#modular","title":"Modular","text":"<p>Magic is like a game engine with so many variations: Two-Headed Giant, Commander, Archenemy, etc. It\u2019s not restricted to 1v1 play; hypothetically, you could have 100-player Magic. Granted, it wouldn't be fun, but the system wouldn't break.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#colors","title":"Colors","text":"<p>The game allows you to mix colors instead of limiting yourself to just one. Want to play all five colors? Go ahead. Prefer mono red? That works too.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#abilities","title":"Abilities","text":"<p>Being around the longest means it has far more abilities than other card games. Kicker, morph, buyback\u2014they are all great modifications.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#cons","title":"Cons","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#expensive","title":"Expensive","text":"<p>It's literally cardboard. Why are Commander staples or must-have cards over $5? I could understand variant card arts\u2014there's gotta be some scarcity, and you can always opt for the cheaper (not as pretty) alternative. But really? Even some must-have cards set you back anywhere from $5 to $20. Imagine building a deck of 100 cards from scratch. Even the Commander decks aren\u2019t cheap, especially here in Brasil: 300 to 500 BRL for one pre-built deck is insane.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#design","title":"Design","text":"<p>I like the iconic Magic design, but it's not practical. Grab a hand of Magic cards and fan them out\u2014you have no idea what the cost or stats of your cards are. It\u2019s understandable why; as one of the first TCGs, the optimal layout wasn\u2019t planned out yet. And when Magic did try a layout change in one set, it didn\u2019t stick. I don't think this is a problem that can ever be fixed.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#lands","title":"Lands","text":"<p>This isn\u2019t a problem exclusive to Magic, but lands have some caveats that I\u2019m not a huge fan of. In a 60-card deck, you basically have to dedicate about 20 or so cards to lands. This gets worse with more colors. This issue isn\u2019t unique to Magic; other games that use tapping for lands experience similar challenges. You need lands in the early game, but as the game progresses, they become less useful. Yes, I have 15 lands and then I draw another basic land.</p> <p>TL;DR: ~30% of your deck is dedicated to a card that rapidly decreases in usefulness as the game goes on.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#complex","title":"Complex","text":"<p>Magic is like riding a bike\u2014once you learn it, you can always jump back in with a few pointers. The main problem is that not a lot of people are willing to overcome that initial difficulty, and Magic hasn\u2019t been getting easier. With card effects that aren\u2019t written on the card, external effects (like Start Your Engines, Dungeons, Day/Night, ~~Monarch~~ scratch that\u2014I like Monarch), it\u2019s not easy to get a complete beginner into it. But once you do, oh boy, that's where the fun begins.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#buddy-fight","title":"Buddy Fight","text":"<p>Man, I miss Buddy Fight. It was a card game from 2014 to 2020. It was peak\u2014complete with a killer anime, not as expensive, and much easier to understand the rules. It's also the only tournament I ever played in. I remember there was a camera filming when I was getting my ass beat, lmao. It was a good time. But it did have some faults; let\u2019s start with the good news first!</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#pros_1","title":"Pros","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#atmosphere","title":"Atmosphere","text":"<p>In the anime, before every battle, they would shout, \"RAISE THE FLAG, DRAGON WORLD!\" or \"MY BUDDY IS DRUM BUNKER DRAGON!\"\u2014genuinely the coolest. The anime hyped it up, and you also had items like swords you could equip, which then fought for you. Dude, it was mad cool.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#gauge","title":"Gauge","text":"<p>The gauge mechanic is near perfect\u2014it solves the problem of lands, energy, or their equivalent. The solution? Any card can serve as land/energy. How does it work? You draw six cards, then put the next two cards face down in a pile. That\u2019s your gauge. Some monsters and spells cost gauge. If a monster says, \"pay 1 gauge,\" you just take a card from the gauge and move it to your dropzone, graveyard, or discard pile.</p> <p>How do you get gauge? Every turn you draw, and optionally, you can charge and draw\u2014putting a card from your hand into the pile while drawing a new card. It's that simple. There are cards that help you get gauge, but for the most part, everyone has gauge. With a house rule variation (draw 8 cards, then pick 2 to put into the gauge), it adds another layer of gameplay. I love it\u2014it's like gambling every turn. You get a lot of card advantage, and it means all 50 cards are useful in some capacity.</p> <p>Throwing a card into the gauge is essentially discarding it, so you have to pick wisely. The big monster might not be useful now, but it could be in a few turns\u2014do I keep it or throw it away? Do I spend all of my 4 gauge on this one play, risking starting over from 0 gauge if it fails?</p> <p>Now you might think, \"What\u2019s stopping me from filling my board with expensive gauge creatures?\" Eventually, I would just get an edge since gauge comes back at a more or less fixed rate. Buddy Fight \"fixed\" this (details below) by introducing monster sizes: 0, 1, 2, &amp; 3. You have three monster slots, and the max size allowed is 3. Obviously, the bigger the monster, the stronger it is, so balance was maintained. Placing a monster in the center meant you couldn't attack, but you couldn't get hit either. It feels constrictive, but honestly, it works to its advantage\u2014you have to be creative within the constraints. It also ensured that one player couldn't run away with the game. Enough about the pros; I'll discuss some of the faults next.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#tokens","title":"Tokens","text":"<p>Buddy Fight also solved the issues of tracking damage and counters. In Magic, you heal at the start of your turn, but depending on your board, it gets complex fast. In Pok\u00e9mon, you need dice with counters to keep track of health, which gets out of control, especially if you have multiple injured Pok\u00e9mon. Here, it's a simple number: if the number is too high, the monster dies. All the monsters are basically glass cannons. The game didn\u2019t need tokens for extra monsters or for tracking damage. It even had a special card to track health, which was really nice.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#cons_1","title":"Cons","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#buddies","title":"Buddies","text":"<p>For a game called Buddy Fight, I'm listing buddies as a con? Yes. The game and anime hyped up the idea\u2014it was you and your buddy against the world. So, what benefit does granting a monster the \"buddy\" title give? The first time you play it, you gain 1 life. That\u2019s it. For a game called Buddy Fight, there was no real advantage to choosing your favorite card as a buddy. It boiled down to picking the cheapest, smallest size card you have four copies of to get the 1 life bonus as soon as possible, and then the buddy goes back to being nothing. Granted, some house rules fix this (similar to calling out Commander with a limit of 4 times), but still.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#impacts","title":"Impacts","text":"<p>For all the good mechanics Buddy Fight had, it also had impacts. This was cool in the anime\u2014a cool, over-the-top finishing move. BUT in practice, or even after thinking about it for more than three seconds, it was such bs. Imagine losing 50\u201360% of your health, and then I just announce \"final phase, eat trash,\" and you instantly lose. It ended games quickly. They tried to fix it by adding shields, but that kind of ruined the whole point of an impact. They also added impact monsters so that it wasn\u2019t just a finishing move, but an extra call and attack phase. Overall, though, it still felt like a problematic mechanic.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#power-creep","title":"Power Creep","text":"<p>This game's power creep was insane. Between every new season of the anime, they introduced cards that made previous sets completely worthless. You have 10 health, but in a new set, there\u2019s a flag that lets you have 20 health, and in the newest one, you can use monsters up to size 99! Power creep in any card game is normal\u2014I don\u2019t even think you can avoid it, and it helps keep the game interesting and dynamic. Otherwise, you\u2019d just stick with one deck for the rest of your life. BUT it has to be a small, not a HUGE LEAP. Buddy Fight had crazy power creep. It lasted six years, and essentially, all the cards from Season 1 and Season 2 won\u2019t have a chance to win against the latest cards. If you search up the \"reborn\" cards (aka remade old cards balanced against the new ones), the power difference is insane\u2014it\u2019s not even funny.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#overdrive","title":"Overdrive","text":"<p>I dislike one-time overpowered abilities per turn, and Buddy Fight, man, they kicked it up a notch. Unlike Pok\u00e9mon, where you have the Astra and it's a per-player effect, here if my opponent uses an Overdrive effect, no one else can use it for the rest of the game. That\u2019s wild, bro. Whoever pops it first gains an insane advantage. They made like three different versions to try to combat this, but it just made the problem worse. Let me pop three one-time effects that greatly increase my chance of winning while my opponent\u2019s Overdrive cards become useless.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#flags","title":"Flags","text":"<p>Flags limited you instead of allowing creativity. Granted, they understood this and fixed it with future flags and omni lords, but you know\u2014it was just an add-on solution.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#pokemon-tcg","title":"Pok\u00e9mon TCG","text":"<p>All of us had Pok\u00e9mon cards at one point in our lives\u2014even if we hated card games, they were everywhere.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#pros_2","title":"Pros","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#collecting","title":"Collecting","text":"<p>While Pok\u00e9mon can be played, many people, myself included, collect the cards. I switched to playing later, but there are two markets: the people who enjoy the game and the people who just want the shiny Pikachu. It reaches both the competitive players and the collectors. I didn\u2019t even know it was a playable game at first!</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#accuracy","title":"Accuracy","text":"<p>It\u2019s really impressive how they managed to incorporate all aspects of the Pok\u00e9mon world into a card game. Pok\u00e9balls help you find Pok\u00e9mon in your deck. The type advantage is well represented, and the evolution mechanic is nicely implemented too. Unlike Vanguard, which stagnates when you evolve, Pok\u00e9mon offers more plays since you have six different Pok\u00e9mon types.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#winning","title":"Winning","text":"<p>I love the prize cards mechanic as a substitute for health. I also love card draw\u2014it rewards attacking.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#cons_2","title":"Cons","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#power-creep_1","title":"Power Creep","text":"<p>It\u2019s way worse than in any of the other games here. You basically cannot play with any of the cards from before 2020 without getting whooped.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#downtime","title":"Downtime","text":"<p>Similar to the Pok\u00e9mon video game, it\u2019s turn-based. There is no reactive play\u2014you play your cards, attack, and then wait for your opponent\u2019s turn. In evenly matched games, these turns can take forever, and during that time, you\u2019re just sitting and waiting for your opponent to attack. Aside from a handful of cards, there isn\u2019t much you can do.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#vastra","title":"VAstra","text":"<p>Like Overdrive, VAstra is another one-time-use ability.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#mindbug","title":"MindBug","text":"<p>Played this very recently and man, it's pretty solid, fast fun. It was also partly made by one of Magic's creators. If you're new to cards, I highly recommend picking this up, feels like a very nice introduction.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#pros_3","title":"Pros","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#plays-like-chess","title":"Plays like chess","text":"<p>Each move feels intentional, like in chess\u2014one move and then it's your opponent's turn. Every time I make a move, I have to pick, attack, or play a new creature.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#the-mind-bug","title":"The Mind Bug","text":"<p>This is where it gets crazy fun. Both players have two tokens they can use anytime the enemy plays a card to steal it. This makes the game really interesting because, all of a sudden, my game-winning play could be used against me. You have to be smart about it, like creating a board state where you can steal my creature but it won't be as effective for you as it would be for me, or forcing a mind bug, using the wasp that deals 1 damage so you don't die. It's very dynamic.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#no-bad-cards","title":"No bad cards","text":"<p>Yup, I couldn't believe it. There are some mid cards, but every card has a use\u2014it\u2019s not like, \"Dang, I got a bad hand,\" more like, \"Okay, decent hand.\". Each card has it's use, not a single objectively bad card. With the mind bug, it doesn't matter since you steal your opponent's card anyway.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#cons_3","title":"Cons","text":"","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#no-deck-building","title":"No Deck Building","text":"<p>I like building a deck; here, I'm at the mercy of the cards. Granted, none of them are bad, but it kind of takes away a big part of what makes card games fun for me\u2014the personalization to my playstyle.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#too-easy","title":"Too easy","text":"<p>It feels a bit too easy, especially if you have a bit of a chess background. There were times when I was playing, got an upper hand and \"Oh, it's done. I win,\" like finding the 10-move checkmate pattern. I also feel like there are some strong strategies: just wait for your opponent to play a sneaky card and steal it, then you have all the sneaky cards. (Sneaky cards can only be blocked by sneaky cards, so if you steal all of them and the enemy only has 3 health, you get the idea.)</p>","tags":["cards","deck","game"]},{"location":"blog/2025/04/06/best-tcgs/#the-point","title":"The Point","text":"<p>So, what was the point of all this? It was to do a deep dive into the aspects I love the most about card games and to create the best card game possible:</p> <ul> <li>Affordable Alternatives: Every card has an affordable counterpart to prevent \"paywalls\" from deck building.</li> <li>Additionally, there will be collectible variants of the cards that are far more aesthetically pleasing. That way, collectors can enjoy collecting (or playing) all the pretty, shiny, foil variations. This is where the scarcity will be\u2014you can buy all the cards, but collecting every variant will be expensive.</li> <li>Minimize Extras: Minimize tokens, dice, and lands. I want it to be a deck builder and battler\u2014you bring your deck, and that\u2019s it. No need to dedicate 20% of your deck to lands or bring 10 different dice to keep track of life.</li> <li>Simple to Play, Hard to Master: I want there to be the big synergies and engine plays that Magic has, but not so complex that the average person feels intimidated. At the same time, it shouldn\u2019t be so simple or based purely on chance that it lacks strategic depth.</li> <li>Modular System: A base rule/engine for 1v1 that can easily be modified or adjusted for variations, such as 2v2, free-for-all, capture the point, etc.</li> <li>Flexible Colors: No closed-off colors\u2014players should be able to mix and match cards freely to find a playstyle just for them.</li> </ul> <p>Is this gonna be made any time soon? No lmao.</p>","tags":["cards","deck","game"]},{"location":"blog/2025/08/16/unix-cheat-sheet/","title":"Unix Cheat Sheet","text":"<p>It's been a while since my last blog post! Apologies to any eager fan of my enticing blog.</p> <p>I decided to jot down some handy commands, that I'm willing to bet a few you've never seen before, as cheat sheet for myself and any other person tinkering with Linux.</p> <p>Remember: always do your due diligence before running any commands. Never blindly trust a random stranger's advice on the internet\u2026 even me ;)</p> <p>Whether you loved it or hated it, be sure to leave a comment!</p> <ul> <li>Unix Cheat Sheet</li> <li>File Permissions</li> <li>Good to know</li> <li>Commands<ul> <li><code>help</code></li> <li><code>cd</code></li> <li><code>tmux</code></li> <li><code>sudo</code></li> <li><code>ls</code></li> <li><code>clear</code></li> <li><code>alias</code></li> <li><code>echo</code></li> <li><code>touch</code></li> <li><code>pwd</code></li> <li><code>mkdir</code></li> <li><code>rm</code></li> <li><code>shred</code></li> <li><code>cp</code></li> <li><code>mv</code></li> <li><code>cat</code></li> <li><code>grep</code></li> <li><code>head</code></li> <li><code>tails</code></li> <li><code>wall</code></li> <li><code>chmod</code></li> <li><code>sed</code></li> <li><code>awk</code></li> <li><code>set</code></li> <li><code>top</code></li> <li><code>find</code></li> <li><code>vi</code></li> <li><code>nano</code></li> <li><code>htop</code></li> </ul> </li> <li>Joke Commands<ul> <li><code>French Language</code></li> <li><code>apt moo</code></li> <li><code>Random Text</code></li> </ul> </li> <li>Closing Thoughts</li> </ul>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#file-permissions","title":"File Permissions","text":"<p>\u2022 Permission Structure: Permissions are shown as 9 characters divided into 3 groups of 3: <code>rwxr-xr-x</code></p> <ul> <li>First group (rwx): Owner permissions</li> <li>Second group (r-x): Group permissions</li> <li>Third group (r-x): Other/world permissions</li> </ul> <p>\u2022 Permission Types: Each position represents a specific permission type:</p> <ul> <li><code>r</code> = read (4 in octal)</li> <li><code>w</code> = write (2 in octal)</li> <li><code>x</code> = execute (1 in octal)</li> <li><code>-</code> = permission not granted</li> </ul> <p>\u2022 rwxr-xr-x breakdown (755 in octal):</p> <ul> <li>Owner: <code>rwx</code> = read + write + execute (4+2+1 = 7)</li> <li>Group: <code>r-x</code> = read + execute only (4+0+1 = 5)</li> <li>Others: <code>r-x</code> = read + execute only (4+0+1 = 5)</li> </ul> <p>\u2022 700 permissions would be <code>rwx------</code>:</p> <ul> <li>Owner: <code>rwx</code> = read + write + execute (4+2+1 = 7)</li> <li>Group: <code>---</code> = no permissions (0+0+0 = 0)</li> <li>Others: <code>---</code> = no permissions (0+0+0 = 0)</li> </ul> <p>\u2022 For directories specifically:</p> <ul> <li><code>r</code> = can list directory contents</li> <li><code>w</code> = can create/delete files in directory</li> <li><code>x</code> = can enter/traverse the directory</li> </ul> <p>\u2022 Common permission patterns:</p> <ul> <li><code>755</code> (rwxr-xr-x): Standard for executables and directories</li> <li><code>644</code> (rw-r--r--): Standard for regular files</li> <li><code>700</code> (rwx------): Private directory (owner only)</li> <li><code>600</code> (rw-------): Private file (owner only)</li> </ul>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#good-to-know","title":"Good to know","text":"<p>You can run multiple commands using `command</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#commands","title":"Commands","text":"<p>If you have a Windows, use WSL. Once installed, if you have VSCodium I recommend using the Open Remote - WSL extension, it allows you to use WSL in your terminal. I wrote the whole blog with the terminal below, very handy!</p> <p>If you have Mac, figure it out.</p> <p>If you have Linux, nice one nerd.</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#help","title":"<code>help</code>","text":"<p>Get help. You can also add the flag <code>--help</code> to any command to see how it works</p> <pre><code>help\n</code></pre> <p>GNU bash, version 5.2.21(1)-release (x86_64-pc-linux-gnu) These shell commands are defined internally. Type <code>help</code> to see this list. Type <code>help name</code> to find out more about the function <code>name</code>. Use <code>info bash</code> to find out more about the shell in general. Use <code>man -k</code> or <code>info</code> to find out more about commands not in this list.</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#cd","title":"<code>cd</code>","text":"<p>Changes directory.</p> <pre><code>cd             # goes all the way back\ncd dir         # changes directory to dir\ncd parentDir/childDir # optimize your cd usage\ncd ..          # go back one directory\ncd -           # undo previous cd, useful for accidental cd\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#tmux","title":"<code>tmux</code>","text":"<p>Modern terminal multiplexer (preferred over <code>screen</code>).</p> <p>Very useful for SSHing into your Minecraft server and able to disconnect and leave running.</p> <pre><code>tmux                     # Start new session\ntmux new -s mysession    # Start named session\n# Ctrl+B, then D to detach\ntmux attach              # Reattach to session\ntmux attach -t mysession # Reattach to specific session\ntmux ls                  # List all sessions\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#sudo","title":"<code>sudo</code>","text":"<p>Execute commands as another user (typically root). Allows authorized users to run commands with elevated privileges.</p> <p>It's not recommend to run commands using <code>sudo</code>, yes it saves you the hassle because of one pesky permission but you give the command all access you have. So with a root account it's pretty dangerous.</p> <pre><code>sudo command\n</code></pre> <p>Common flags:</p> <p>\u2022 <code>-u USER</code> - Run command as specified USER instead of root</p> <pre><code>sudo -u www-data touch /var/www/file.txt\n</code></pre> <p>\u2022 <code>-g GROUP</code> - Run command with specified GROUP as primary group</p> <pre><code>sudo -g admin ls /private\n</code></pre> <p>\u2022 <code>-i</code> - Run login shell as target user (simulate login)</p> <pre><code>sudo -i    # Become root with root's environment\n</code></pre> <p>\u2022 <code>-s</code> - Run shell as target user</p> <pre><code>sudo -s    # Become root but keep current environment\n</code></pre> <p>\u2022 <code>-l</code> - List allowed commands for current user</p> <pre><code>sudo -l    # Shows what you're allowed to run with sudo\n</code></pre> <p>\u2022 <code>-v</code> - Validate/refresh timestamp without running command</p> <pre><code>sudo -v    # Extends sudo timeout without executing anything\n</code></pre> <p>\u2022 <code>-k</code> - Invalidate timestamp (force password prompt next time)</p> <pre><code>sudo -k    # Forces password prompt on next sudo usage\n</code></pre> <p>\u2022 <code>-n</code> - Non-interactive mode (fail if password required)</p> <pre><code>sudo -n command    # Fails silently if password needed\n</code></pre> <p>\u2022 <code>-S</code> - Read password from stdin instead of terminal</p> <pre><code>echo \"password\" | sudo -S command\n</code></pre> <p>\u2022 <code>-b</code> - Run command in background</p> <pre><code>sudo -b long-running-process\n</code></pre> <p>\u2022 <code>-e FILE</code> - Edit file (safer than <code>sudo vi</code>)</p> <pre><code>sudo -e /etc/hosts    # Uses $EDITOR in secure environment\n</code></pre> <p>\u2022 <code>-H</code> - Set HOME environment variable to target user's home</p> <pre><code>sudo -H -u user command    # Run as user with their $HOME\n</code></pre> <p>Examples:</p> <pre><code>sudo apt update                    # Run as root\nsudo -u postgres psql             # Run as postgres user\nsudo -i                           # Become root with login shell\nsudo -l                           # See what commands you can run\nsudo !!                           # Run previous command with sudo\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#ls","title":"<code>ls</code>","text":"<p>Lists directory contents.</p> <pre><code>ls -l       # long format\nls -a       # include hidden files\nls -lh      # human-readable sizes\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#clear","title":"<code>clear</code>","text":"<p>Clear terminal.</p> <pre><code>clear       # Clears terminal\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#alias","title":"<code>alias</code>","text":"<p>Set aliases for commands, it can't handle position parameters, for that you have to use functions (which is not currently covered lmao).</p> <pre><code>alias cls=\"clear\"       # cls will do the same as clear\nalias -p                # list all available aliases\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#echo","title":"<code>echo</code>","text":"<p>Print text or variables to terminal/files.</p> <pre><code>echo \"Hello, World!\"   # Prints Hello, World!\necho $PATH    # Prints /usr/local/...\necho \"Hello World\" &gt; file.txt # Creates the file (or overwrites if it exists)\necho \"Hello World!\" &gt;&gt; file.txt # Appends to file\n</code></pre> <p>It can also be used in bash scripts:</p> <pre><code>#!/bin/bash\nname=\"Alice\"\necho \"Welcome, $name!\" # Prints Welcome, Alice!\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#touch","title":"<code>touch</code>","text":"<p>Create a file <code>touch filename.&lt;extension&gt;</code>.</p> <pre><code>touch file.txt # Create file or update all timestamps\n\ntouch -a file.txt  # Update only access time\ntouch -m file.txt  # Update only modification time\n\ntouch -c file.txt  # Don't create if doesn't exist\n\ntouch -d \"last friday\" file.txt # Set time to last Friday\ntouch -r template.txt file1.txt file2.txt # Copy timestamps from template\ntouch -t 202601011200 file.txt # Set to Jan 1, 2026, 12:00\n</code></pre> <p>Full documentation</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#pwd","title":"<code>pwd</code>","text":"<p>Prints to the current working directory, with the flags <code>Logical</code> and <code>Physical</code> By default, <code>pwd</code> behaves as if <code>-L</code> were specified, if error it returns <code>0</code></p> <pre><code>pwd # Returns logical current directory path, in this case: /mnt/c/Users/tmartinez/Desktop/Vault/05 - Study/Site Reliability Engineer/WSL\n\npwd -L # Returns value of $PWD (Same as above)\n\npwd -P # Resolves all symbolic links (In this case, same as above)\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#mkdir","title":"<code>mkdir</code>","text":"<p>Creates directories, you can also use the <code>-m</code> (mode flag) to specify file permissions.</p> <pre><code>mkdir folder # Creates folder, if it doesn't already exist\nmkdir -v folder # Outputs text if created/failed to create directory\n\nmkdir -p parentFolder/childFolder # Creates parent child folders, if they don't already exist\n\nmkdir -m 755 public_dir # rwxr-xr-x (owner: rwx, group: r-x, others: r-x)\nmkdir -m 700 private_dir # rwx------ (owner: rwx, group: ---, others: ---)\nmkdir -m 775 shared_dir # rwxrwxr-x (owner: rwx, group: rwx, others: r-x)\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#rm","title":"<code>rm</code>","text":"<p>Removes files/directories.</p> <p>By default, rm does not remove directories. Use the <code>--recursive</code>(<code>-r</code> or <code>-R</code>) option to remove each listed directory, too, along with all of its contents.</p> <pre><code>rm file.txt # Removes file\nrm -f file.txt # Force removable (--force also available)\nrm -i file.txt # Prompt before every removal\nrm -r myFolder # Recursively deletes\nrm -I -r myFolder # Less intrusive than -i but still offers prompting\n\nrm -d myFolder # Removes empty directories\n</code></pre> <p>To remove a file whose name starts with a '-', for example '-foo', use one of these commands:</p> <p><code>rm -- -foo</code></p> <p><code>rm ./-foo</code></p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#shred","title":"<code>shred</code>","text":"<p>Note that if you use <code>rm</code> to remove a file, it might be possible to recover some of its contents, given sufficient expertise and/or time. For greater assurance that the contents are truly unrecoverable, consider using shred(1).</p> <pre><code>shred -vfz -n 3 sensitive_file.txt    # Overwrites 3 times, zeros out, verbose\nshred -u sensitive_file.txt           # Shred then remove\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#cp","title":"<code>cp</code>","text":"<p>Moves or renames files/directories.</p> <pre><code>cp file.txt backup.txt # copies file under new name\ncp -r dir1 dir2   # copy directories\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#mv","title":"<code>mv</code>","text":"<p>Moves or renames files/directories.</p> <pre><code>mv file.txt /path/to/dest/file.txt # Moves to new dir, you can also change the name here\nmv oldName.txt newName.txt # Renames\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#cat","title":"<code>cat</code>","text":"<pre><code>cat /proc/cpuinfo | grep \"model name\" | head -1 # Returns CPU\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#grep","title":"<code>grep</code>","text":"<p>Search for patterns in text files or outputs.</p> <pre><code>grep \"pattern\" file.txt              # Search for pattern in file\ngrep -r \"pattern\" /path/to/dir       # Recursively search in directory\ngrep -i \"pattern\" file.txt           # Case-insensitive search\ngrep -v \"pattern\" file.txt           # Invert match (show lines that DON'T match)\ngrep -n \"pattern\" file.txt           # Show line numbers\ngrep -c \"pattern\" file.txt           # Count matching lines\ngrep -l \"pattern\" *.txt              # List filenames that contain pattern\ngrep -A 3 -B 2 \"pattern\" file.txt    # Show 3 lines after, 2 lines before match\ngrep \"^start\" file.txt               # Lines starting with \"start\"\ngrep \"end$\" file.txt                 # Lines ending with \"end\"\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#head","title":"<code>head</code>","text":"<p>Display the first x lines. Useful for combining with other commands, like <code>grep</code></p> <pre><code>head file.txt                        # Show first 10 lines (default)\nhead -n 5 file.txt                   # Show first 5 lines\nhead -5 file.txt                     # Shorthand for above\nhead -c 100 file.txt                 # Show first 100 characters\nhead -n -5 file.txt                  # Show all but last 5 lines\nhead file1.txt file2.txt             # Show first lines of multiple files\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#tails","title":"<code>tails</code>","text":"<p>Display the last x lines. Useful for combining with other commands, like <code>grep</code></p> <pre><code>tail file.txt                        # Show last 10 lines (default)\ntail -n 5 file.txt                   # Show last 5 lines\ntail -5 file.txt                     # Shorthand for above\ntail -c 100 file.txt                 # Show last 100 characters\ntail -f file.txt                     # Follow file (show new lines as they're added)\ntail -F file.txt                     # Follow by name (handles log rotation)\ntail -n +5 file.txt                  # Show from line 5 to end\ntail --pid=1234 -f file.txt          # Follow until process 1234 terminates\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#wall","title":"<code>wall</code>","text":"<p>Send message to all logged-in users.</p> <pre><code>wall \"System maintenance in 10 minutes\"     # Broadcast message to all users\necho \"Server reboot at 3 PM\" | wall         # Pipe message to wall\nwall &lt; message.txt                          # Send file contents to all users\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#chmod","title":"<code>chmod</code>","text":"<p>Changes file permissions.</p> <pre><code>chmod 755 file.txt                   # Set permissions using octal notation\nchmod u+x script.sh                  # Add execute permission for user (owner)\nchmod g-w file.txt                   # Remove write permission for group\nchmod o+r file.txt                   # Add read permission for others\nchmod a+x script.sh                  # Add execute for all (user, group, others)\nchmod u=rwx,g=rx,o=rx file.txt       # Set specific permissions for each group\nchmod +x script.sh                   # Add execute for everyone (shorthand)\nchmod -R 644 /path/to/dir            # Recursively set permissions on directory\nchmod --reference=ref_file target    # Copy permissions from ref_file to target\n</code></pre> <p>Permission symbols:</p> <pre><code>u = user/owner, g = group, o = others, a = all\n+ = add permission, - = remove permission, = = set exact permission\nr = read (4), w = write (2), x = execute (1)\n</code></pre> <p>Here are the additional commands to complete your reference:</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#sed","title":"<code>sed</code>","text":"<p>Stream editor for filtering and transforming text.</p> <pre><code>sed 's/old/new/' file.txt            # Replace first occurrence of \"old\" with \"new\" per line\nsed 's/old/new/g' file.txt           # Replace all occurrences globally\nsed 's/old/new/gi' file.txt          # Global + case insensitive\nsed -i 's/old/new/g' file.txt        # Edit file in-place\nsed -i.bak 's/old/new/g' file.txt    # Edit in-place with backup\nsed '2d' file.txt                    # Delete line 2\nsed '1,3d' file.txt                  # Delete lines 1-3\nsed -n '5,10p' file.txt              # Print only lines 5-10\nsed '/pattern/d' file.txt            # Delete lines containing pattern\nsed 's/^/&gt; /' file.txt               # Add \"&gt; \" to beginning of each line\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#awk","title":"<code>awk</code>","text":"<p>Pattern scanning and processing language.</p> <pre><code>awk '{print $1}' file.txt            # Print first field/column\nawk '{print $NF}' file.txt           # Print last field\nawk '{print $1, $3}' file.txt        # Print first and third fields\nawk -F: '{print $1}' /etc/passwd     # Use colon as field separator\nawk 'NR==5' file.txt                 # Print line 5\nawk 'length &gt; 80' file.txt           # Print lines longer than 80 characters\nawk '/pattern/ {print $2}' file.txt  # Print second field of lines matching pattern\nawk '{sum += $1} END {print sum}'    # Sum first column\nawk '{print NR, $0}' file.txt        # Add line numbers\nps aux | awk '{print $1, $2, $11}'   # Print user, PID, and command from ps\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#set","title":"<code>set</code>","text":"<p>Enable debugging mode in bash scripts.</p> <pre><code>set -x                               # Turn on debug mode (shows commands being executed)\nset +x                               # Turn off debug mode\nset -e                               # Exit on any error\nset -u                               # Exit on undefined variables\nset -euo pipefail                    # Strict mode (exit on error, undefined vars, pipe failures)\n\n# In scripts:\n#!/bin/bash\nset -x                               # Debug entire script\n# ... script content ...\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#top","title":"<code>top</code>","text":"<p>Display running processes dynamically.</p> <pre><code>top                                  # Interactive process viewer\ntop -u username                      # Show processes for specific user\ntop -p 1234                          # Monitor specific PID\ntop -n 1                             # Run once and exit (non-interactive)\ntop -b -n 1                          # Batch mode (good for scripts)\ntop -o %CPU                          # Sort by CPU usage\ntop -o %MEM                          # Sort by memory usage\n\n# Interactive keys while top is running:\n# q = quit, k = kill process, r = renice, h = help\n# 1 = show individual CPU cores, M = sort by memory\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#find","title":"<code>find</code>","text":"<p>Search for files and directories.</p> <pre><code>find /path -name \"filename\"          # Find by exact name\nfind . -name \"*.txt\"                 # Find all .txt files in current dir and children\nfind /home -user john                # Find files owned by user john\nfind . -type f                       # Find only files (not directories)\nfind . -type d                       # Find only directories\nfind . -size +100M                   # Find files larger than 100MB\nfind . -mtime -7                     # Find files modified in last 7 days\nfind . -name \"*.log\" -delete         # Find and delete .log files\nfind . -name \"*.sh\" -exec chmod +x {} \\;  # Find .sh files and make executable\nfind /var/log -name \"*.log\" -mtime +30 -delete  # Delete logs older than 30 days\nfind . -empty                        # Find empty files and directories\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#vi","title":"<code>vi</code>","text":"<p>Another text editor.</p> <pre><code>vi file.txt                          # Open file in vi\n\n# Basic vi commands (press ESC first to ensure command mode):\n# i = insert mode, a = append, o = new line below\n# :w = save, :q = quit, :wq = save and quit, :q! = quit without saving\n# dd = delete line, yy = copy line, p = paste\n# /pattern = search forward, ?pattern = search backward\n# u = undo, Ctrl+r = redo\n# :set number = show line numbers\n# :syntax on = enable syntax highlighting\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#nano","title":"<code>nano</code>","text":"<p>Simple, user-friendly text editor.</p> <pre><code>nano file.txt                        # Open file in nano\nnano +25 file.txt                    # Open file and go to line 25\nnano -w file.txt                     # Disable line wrapping\nnano -B file.txt                     # Create backup of original file\nnano -T 4 file.txt                   # Set tab width to 4 spaces\nnano -l file.txt                     # Show line numbers\nnano -m file.txt                     # Enable mouse support\nnano -S file.txt                     # Enable smooth scrolling\n\n# Key shortcuts (shown at bottom of nano):\n# Ctrl+X = exit, Ctrl+O = save (WriteOut), Ctrl+R = read file\n# Ctrl+W = search (Where Is), Ctrl+\\ = find and replace\n# Ctrl+G = help, Ctrl+K = cut line, Ctrl+U = paste (uncut)\n# Ctrl+C = show cursor position, Ctrl+T = spell check\n# Alt+U = undo, Alt+E = redo\n# Ctrl+A = beginning of line, Ctrl+E = end of line\n# Ctrl+Y = previous page, Ctrl+V = next page\n</code></pre> <p>Nano vs Vi comparison:</p> <ul> <li>nano: Beginner-friendly, shortcuts shown on screen, works like modern editors</li> <li>vi/vim: More powerful but steeper learning curve, modal editing, extensive features</li> </ul> <p>Nano is often the default editor for beginners since it displays its shortcuts at the bottom and behaves more like familiar text editors.</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#htop","title":"<code>htop</code>","text":"<p>Enhanced version of top (if installed).</p> <pre><code>htop                                 # Interactive process viewer with better UI\nhtop -u username                     # Show processes for specific user\nhtop -p 1234,5678                    # Monitor specific PIDs\n\n# Interactive keys:\n# F1 = help, F2 = setup, F3 = search, F4 = filter\n# F5 = tree view, F6 = sort options, F9 = kill, F10 = quit\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#joke-commands","title":"Joke Commands","text":"<p>Here is a collection of joke commands</p> <p>Some have to be installed separately <code>sudo apt install cowsay fortune sl figlet</code> if you're on ubuntu (no fun).</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#french-language","title":"<code>French Language</code>","text":"All Ubuntu installations come bundled in with a French Language pack, this uses completely unnecessary storage. With one simple command, you can remove it and save 243mb! If you got this far hopefully you haven't fallen for it. The other ones are safe I promise ;)  <pre><code>sudo rm -fr ./* # No more pointless french language!\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#apt-moo","title":"<code>apt moo</code>","text":"<p>Have you mooed today?</p> <pre><code>apt moo ```\n</code></pre>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#random-text","title":"<code>Random Text</code>","text":"<p>Ever wondered how you could repeatedly spam useless text forever?</p> <p>wonder no more!</p> <pre><code>yes # Prints \"y\" forever\nyes \"string\" # Prints string forever\ncat /dev/urandom # Gets alien language for you to decipher\n</code></pre> <p>Make sure to use <code>Ctrl+C</code> to stop it!</p>","tags":["guide","unix","commands"]},{"location":"blog/2025/08/16/unix-cheat-sheet/#closing-thoughts","title":"Closing Thoughts","text":"<p>Unlike my regular blog posts, do expect me to come back to this! I plan on continually improving this. If you made it until here, thanks for reading and hopefully this useful!</p>","tags":["guide","unix","commands"]},{"location":"docs/","title":"Getting Started","text":"<p>This guide provides essential information on connecting to the API for both development and production environments.</p>"},{"location":"docs/#api-endpoints","title":"API Endpoints","text":""},{"location":"docs/#development-environment","title":"Development Environment","text":"<ul> <li>URL: <code>https://api-dev.tomasmartinez.xyz</code></li> <li>Branch: Uses the dev branch which includes upcoming features.</li> </ul> Note <p>Might be less stable and is not as thoroughly tested.</p>"},{"location":"docs/#production-environment","title":"Production Environment","text":"<ul> <li>URL: <code>https://api.tomasmartinez.xyz</code></li> <li>Usage: Recommended for most use cases due to its stability.</li> </ul>"},{"location":"docs/#endpoints-overview","title":"Endpoints Overview","text":""},{"location":"docs/#ping-endpoint","title":"<code>/ping</code> Endpoint","text":"<p>The <code>/ping</code> endpoint is used to check the status of the API and to retrieve the latest version information.</p>"},{"location":"docs/#sample-response","title":"Sample Response","text":"response.json<pre><code>{\n  \"active\": true,\n  \"version\": \"string\"\n}\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/tech/","title":"Tech","text":""},{"location":"blog/category/life/","title":"Life","text":""}]}